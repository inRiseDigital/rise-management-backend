from django.db import models
from django.core.exceptions import ValidationError
from decimal import Decimal,ROUND_HALF_UP
from django.core.validators import MinValueValidator
from django.db import transaction

class Store(models.Model):
    name       = models.CharField(max_length=100, unique=True)
    created_at = models.DateTimeField(auto_now_add=True)
    def __str__(self):
        return self.name

class ProductCategory(models.Model):
    store = models.ForeignKey(
        Store, on_delete=models.CASCADE,
        related_name="store_categories", default=1
    )
    name = models.CharField(max_length=100, unique=True)
    def __str__(self):
        return self.name

class ProductSubCategory(models.Model):
    category = models.ForeignKey(ProductCategory, on_delete=models.CASCADE,related_name="subcategories")
    name     = models.CharField(max_length=100)
    class Meta:
        unique_together = ("category", "name")
    def __str__(self):
        return f"{self.category.name} ▶ {self.name}"

class InventoryItem(models.Model):
    store           = models.ForeignKey(Store, on_delete=models.CASCADE,related_name="inventory_items", default=1)
    category        = models.ForeignKey(ProductCategory, on_delete=models.CASCADE,related_name="inventory_items", null=True, blank=True)
    subcategory     = models.ForeignKey(ProductSubCategory, on_delete=models.CASCADE,related_name="inventory_items", null=True, blank=True)
    units_in_stock  = models.DecimalField(max_digits=12, decimal_places=2, default=0)
    # You could bump to max_digits=18, decimal_places=6 if needed:
    unit_cost       = models.DecimalField(max_digits=14, decimal_places=4, default=0)
    updated_at      = models.DateTimeField(auto_now=True)

    class Meta:
        unique_together = (("store", "category", "subcategory"),)

    def clean(self):
        super().clean()
        # Only enforce matching; drop the XOR check:
        if self.subcategory and self.subcategory.category_id != self.category_id:
            raise ValidationError({
                "subcategory": "Must belong to the selected category."
            })

    @property
    def total_cost(self):
        return self.units_in_stock * self.unit_cost

    def receive(self, add_units, cost_per_unit):
        add = Decimal(str(add_units))
        cost = Decimal(str(cost_per_unit))
        old_total   = self.units_in_stock * self.unit_cost
        new_total   = add * cost
        total_units = self.units_in_stock + add

        # Compute raw weighted average
        raw = (old_total + new_total) / total_units if total_units else Decimal("0")
        # Quantize to 4 decimal places, rounding half up
        self.unit_cost = raw.quantize(Decimal("0.0001"), rounding=ROUND_HALF_UP)

        self.units_in_stock = total_units
        self.full_clean()
        self.save()

    def issue(self, rm_units):
        rm = Decimal(str(rm_units))
        if rm > self.units_in_stock:
            raise ValidationError("Insufficient stock to issue.")
        self.units_in_stock -= rm
        self.full_clean()
        self.save()

    def __str__(self):
        name = self.subcategory.name if self.subcategory else self.category.name
        return f"{self.store.name} – {name}: {self.units_in_stock} @ ₹{self.unit_cost:.4f}"
    
    